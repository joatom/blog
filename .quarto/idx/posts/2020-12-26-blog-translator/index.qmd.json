{"title":"Automatically translate blog posts","markdown":{"yaml":{"toc":true,"layout":"post","comments":{"utterances":{"repo":"joatom/blog"}},"date":"2020-12-26","description":"How to translate a German blog post to English.","categories":["NLP","ML"],"image":"logo_blog_translator.png","title":"Automatically translate blog posts","from":"markdown+emoji","author":"Johannes Tomasoni"},"headingText":"load pretrained model and tokenizer","containsRefs":false,"markdown":"\n\n[:de:](index-de.html) [:us:](index.html) \n\n> Attention! This text has been automatically translated! \n\nSince I made so many mistakes in my first [Blog post](https://datamuni.com/@joatom/a-handful-of-bricks-from-sql-to-pandas), I write this post in German and have it automatically translated. \n\nFor translation I use the popular NLP framework of [huggingface.co](https://huggingface.co/transformers/index.html). On their website is a simple [example](https://huggingface.co/transformers/model_doc/marian.html) to implement a translation application and I will use it. \n\nAs expected, the Markdown syntax does not immediately work correctly when translating. \nSo I had to make some adjustments at the beginning and afterwards. \n\nThe code (including pre- and post-processing) I used for the translation of the markdown files can be found [here](https://github.com/joatom/blog-resources/tree/main/blog_translator). \nBut since it's just a few lines of code, we can also look at it here: \n\n```python \nfrom transformers import MarianMTModel, MarianTokenizer \n \nmodel_name = 'Helsinki-NLP/opus-mt-de-en' \ntokenizer = MarianTokenizer.from_pretrained(model_name) \nmodel = MarianMTModel.from_pretrained(model_name) \n \n# load german block post \nf_in = open(\"blog_translator_de.md\", \"r\") \nsrc_text = f_in.readlines() \nf_in.close() \n \n# preprocessing \n## line break (\\n) results to \"I don't know.\"  We make it more specific: \nsrc_text = [s.replace('\\n',' ') for s in src_text] \n \n## remove code block \ncode = [] \ninside_code_block = False \nfor i, line in enumerate(src_text): \n    if line.startswith('```') and not inside_code_block: \n        # entering codeblock \n        inside_code_block = True \n        code += [line] \n        src_text[i] = '<<code_block>>' \n    elif inside_code_block and not line.startswith('```'): \n        code += [line] \n        src_text[i] = '<<code_block>>' \n    elif inside_code_block and line.startswith('```'): \n        # leaving code block \n        code += [line] \n        src_text[i] = '<<code_block>>' \n        inside_code_block = False \n \n# translate \ntranslated = model.generate(**tokenizer.prepare_seq2seq_batch(src_text, return_tensors=\"pt\")) \ntgt_text = [tokenizer.decode(t, skip_special_tokens=True) for t in translated] \n \n# postprocessing \n## replace code_blog tags with code \nfor i, line in enumerate(tgt_text): \n    if line == '<<code_block>>': \n        tgt_text[i] = code.pop(0) \n \n## remove the eol (but keep empty list entries / lines) \ntgt_text = [s.replace('', '',) for s in tgt_text] \n## remove space between ]( to get the md link syntax right \ntgt_text = [s.replace('](', '](',) for s in tgt_text] \n \n# write english blog post \nwith open('2020-12-26-blog-translator.md', 'w') as f_out: \n    for line in tgt_text: \n        f_out.write(\"%s\\n\" % line) \nf_out.close() \n``` \n\nSince this is my first NLP application, I left it with this *Hello World* code. Surely there are clever ways to map the markdown syntax in *tokenizer*. Maybe I'll write a follow up when I find out. \n\nBy the way, the translation just made me adapt my German writing style. \nFor example, sarcasm doesn't work so well after translation, so I avoided it. \nAlso, it often depends on the correct choice of words (e.g. there is no markdown command, but there is markdown syntax). <<eol>\n\nBest regards \n\nJohannes & the Robot\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"from":"markdown+emoji","output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.256","theme":{"light":"flatly","dark":"darkly"},"title-block-banner":true,"layout":"post","comments":{"utterances":{"repo":"joatom/blog"}},"date":"2020-12-26","description":"How to translate a German blog post to English.","categories":["NLP","ML"],"image":"logo_blog_translator.png","title":"Automatically translate blog posts","author":"Johannes Tomasoni"},"extensions":{"book":{"multiFile":true}}}}}